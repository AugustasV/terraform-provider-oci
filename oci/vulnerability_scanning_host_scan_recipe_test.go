// Copyright (c) 2017, 2021, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package oci

import (
	"context"
	"fmt"
	"strconv"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/oracle/oci-go-sdk/v48/common"
	oci_vulnerability_scanning "github.com/oracle/oci-go-sdk/v48/vulnerabilityscanning"

	"github.com/terraform-providers/terraform-provider-oci/httpreplay"
)

var (
	HostScanRecipeRequiredOnlyResource = HostScanRecipeResourceDependencies +
		GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Required, Create, hostScanRecipeRepresentation)

	HostScanRecipeResourceConfig = HostScanRecipeResourceDependencies +
		GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Optional, Update, hostScanRecipeRepresentation)

	hostScanRecipeSingularDataSourceRepresentation = map[string]interface{}{
		"host_scan_recipe_id": Representation{RepType: Required, Create: `${oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe.id}`},
	}

	hostScanRecipeDataSourceRepresentation = map[string]interface{}{
		"compartment_id": Representation{RepType: Required, Create: `${var.compartment_id}`},
		"display_name":   Representation{RepType: Optional, Create: `displayName`, Update: `displayName3`},
		"state":          Representation{RepType: Optional, Create: `ACTIVE`},
		"filter":         RepresentationGroup{Required, hostScanRecipeDataSourceFilterRepresentation}}
	hostScanRecipeDataSourceFilterRepresentation = map[string]interface{}{
		"name":   Representation{RepType: Required, Create: `id`},
		"values": Representation{RepType: Required, Create: []string{`${oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe.id}`}},
	}

	hostScanRecipeRepresentation = map[string]interface{}{
		"agent_settings": RepresentationGroup{Required, hostScanRecipeAgentSettingsRepresentation},
		"compartment_id": Representation{RepType: Required, Create: `${var.compartment_id}`},
		"port_settings":  RepresentationGroup{Required, hostScanRecipePortSettingsRepresentation},
		"schedule":       RepresentationGroup{Required, hostScanRecipeScheduleRepresentation},
		"defined_tags":   Representation{RepType: Optional, Create: `${map("${oci_identity_tag_namespace.tag-namespace1.name}.${oci_identity_tag.tag1.name}", "value")}`, Update: `${map("${oci_identity_tag_namespace.tag-namespace1.name}.${oci_identity_tag.tag1.name}", "updatedValue")}`},
		"display_name":   Representation{RepType: Optional, Create: `displayName`, Update: `displayName3`},
		"freeform_tags":  Representation{RepType: Optional, Create: map[string]string{"bar-key": "value"}, Update: map[string]string{"Department": "Accounting"}},
		"lifecycle":      RepresentationGroup{Required, ignoreChangesHostScanRecipeRepresentation},
	}
	hostScanRecipeAgentSettingsRepresentation = map[string]interface{}{
		"scan_level":          Representation{RepType: Required, Create: `NONE`, Update: `STANDARD`},
		"agent_configuration": RepresentationGroup{Optional, hostScanRecipeAgentSettingsAgentConfigurationRepresentation},
	}
	hostScanRecipePortSettingsRepresentation = map[string]interface{}{
		"scan_level": Representation{RepType: Required, Create: `NONE`, Update: `LIGHT`},
	}
	hostScanRecipeScheduleRepresentation = map[string]interface{}{
		"type":        Representation{RepType: Required, Create: `DAILY`, Update: `WEEKLY`},
		"day_of_week": Representation{RepType: Optional, Create: `SUNDAY`, Update: `MONDAY`},
	}
	hostScanRecipeAgentSettingsAgentConfigurationRepresentation = map[string]interface{}{
		"vendor":                 Representation{RepType: Required, Create: `OCI`},
		"cis_benchmark_settings": RepresentationGroup{Optional, hostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettingsRepresentation},
		//"endpoint_protection_settings": RepresentationGroup{Optional, hostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettingsRepresentation},
	}
	hostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettingsRepresentation = map[string]interface{}{
		"scan_level": Representation{RepType: Optional, Create: `NONE`, Update: `LIGHT`},
	}
	hostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettingsRepresentation = map[string]interface{}{
		"scan_level": Representation{RepType: Optional, Create: `NONE`, Update: `NONE`},
	}
	ignoreChangesHostScanRecipeRepresentation = map[string]interface{}{
		"ignore_changes": Representation{RepType: Required, Create: []string{`defined_tags`}},
	}

	HostScanRecipeResourceDependencies = DefinedTagsDependencies
)

// issue-routing-tag: vulnerability_scanning/default
func TestVulnerabilityScanningHostScanRecipeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningHostScanRecipeResource_basic")
	defer httpreplay.SaveScenario()

	config := testProviderConfig()

	compartmentId := getEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	compartmentIdU := getEnvSettingWithDefault("compartment_id_for_update", compartmentId)
	compartmentIdUVariableStr := fmt.Sprintf("variable \"compartment_id_for_update\" { default = \"%s\" }\n", compartmentIdU)

	resourceName := "oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe"
	datasourceName := "data.oci_vulnerability_scanning_host_scan_recipes.test_host_scan_recipes"
	singularDatasourceName := "data.oci_vulnerability_scanning_host_scan_recipe.test_host_scan_recipe"

	var resId, resId2 string
	// Save TF content to Create resource with optional properties. This has to be exactly the same as the config part in the "Create with optionals" step in the test.
	SaveConfigContent(config+compartmentIdVariableStr+HostScanRecipeResourceDependencies+
		GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Optional, Create, hostScanRecipeRepresentation), "vulnerabilityscanning", "hostScanRecipe", t)

	ResourceTest(t, testAccCheckVulnerabilityScanningHostScanRecipeDestroy, []resource.TestStep{
		// verify Create
		{
			Config: config + compartmentIdVariableStr + HostScanRecipeResourceDependencies +
				GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Required, Create, hostScanRecipeRepresentation),
			Check: ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "DAILY"),

				func(s *terraform.State) (err error) {
					resId, err = FromInstanceState(s, resourceName, "id")
					return err
				},
			),
		},

		// delete before next Create
		{
			Config: config + compartmentIdVariableStr + HostScanRecipeResourceDependencies,
		},
		// verify Create with optionals
		{
			Config: config + compartmentIdVariableStr + HostScanRecipeResourceDependencies +
				GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Optional, Create, hostScanRecipeRepresentation),
			Check: ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.0.scan_level", "NONE"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor", "OCI"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "defined_tags.%", "1"),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.day_of_week", "SUNDAY"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "DAILY"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),

				func(s *terraform.State) (err error) {
					resId, err = FromInstanceState(s, resourceName, "id")
					if isEnableExportCompartment, _ := strconv.ParseBool(getEnvSettingWithDefault("enable_export_compartment", "true")); isEnableExportCompartment {
						if errExport := TestExportCompartmentWithResourceName(&resId, &compartmentId, resourceName); errExport != nil {
							return errExport
						}
					}
					return err
				},
			),
		},

		// verify Update to the compartment (the compartment will be switched back in the next step)
		{
			Config: config + compartmentIdVariableStr + compartmentIdUVariableStr + HostScanRecipeResourceDependencies +
				GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Optional, Create,
					RepresentationCopyWithNewProperties(hostScanRecipeRepresentation, map[string]interface{}{
						"compartment_id": Representation{RepType: Required, Create: `${var.compartment_id_for_update}`},
					})),
			Check: ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.0.scan_level", "NONE"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor", "OCI"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentIdU),
				resource.TestCheckResourceAttr(resourceName, "defined_tags.%", "1"),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "NONE"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.day_of_week", "SUNDAY"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "DAILY"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),

				func(s *terraform.State) (err error) {
					resId2, err = FromInstanceState(s, resourceName, "id")
					if resId != resId2 {
						return fmt.Errorf("resource recreated when it was supposed to be updated")
					}
					return err
				},
			),
		},

		// verify updates to updatable parameters
		{
			Config: config + compartmentIdVariableStr + HostScanRecipeResourceDependencies +
				GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Optional, Update, hostScanRecipeRepresentation),
			Check: ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.0.scan_level", "LIGHT"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.agent_configuration.0.vendor", "OCI"),
				resource.TestCheckResourceAttr(resourceName, "agent_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "defined_tags.%", "1"),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName3"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "port_settings.0.scan_level", "LIGHT"),
				resource.TestCheckResourceAttr(resourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.day_of_week", "MONDAY"),
				resource.TestCheckResourceAttr(resourceName, "schedule.0.type", "WEEKLY"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),

				func(s *terraform.State) (err error) {
					resId2, err = FromInstanceState(s, resourceName, "id")
					if resId != resId2 {
						return fmt.Errorf("Resource recreated when it was supposed to be updated.")
					}
					return err
				},
			),
		},
		// verify datasource
		{
			Config: config +
				GenerateDataSourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipes", "test_host_scan_recipes", Optional, Update, hostScanRecipeDataSourceRepresentation) +
				compartmentIdVariableStr + HostScanRecipeResourceDependencies +
				GenerateResourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Optional, Update, hostScanRecipeRepresentation),
			Check: ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(datasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(datasourceName, "display_name", "displayName3"),
				resource.TestCheckResourceAttr(datasourceName, "state", "ACTIVE"),

				resource.TestCheckResourceAttr(datasourceName, "host_scan_recipe_summary_collection.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "host_scan_recipe_summary_collection.0.items.#", "1"),
			),
		},
		// verify singular datasource
		{
			Config: config +
				GenerateDataSourceFromRepresentationMap("oci_vulnerability_scanning_host_scan_recipe", "test_host_scan_recipe", Required, Create, hostScanRecipeSingularDataSourceRepresentation) +
				compartmentIdVariableStr + HostScanRecipeResourceConfig,
			Check: ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(singularDatasourceName, "host_scan_recipe_id"),

				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.cis_benchmark_settings.0.scan_level", "LIGHT"),
				//resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.#", "0"),
				//resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.endpoint_protection_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.agent_configuration.0.vendor", "OCI"),
				resource.TestCheckResourceAttr(singularDatasourceName, "agent_settings.0.scan_level", "STANDARD"),
				resource.TestCheckResourceAttr(singularDatasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(singularDatasourceName, "defined_tags.%", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "display_name", "displayName3"),
				resource.TestCheckResourceAttr(singularDatasourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "id"),
				resource.TestCheckResourceAttr(singularDatasourceName, "port_settings.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "port_settings.0.scan_level", "LIGHT"),
				resource.TestCheckResourceAttr(singularDatasourceName, "schedule.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "schedule.0.day_of_week", "MONDAY"),
				resource.TestCheckResourceAttr(singularDatasourceName, "schedule.0.type", "WEEKLY"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "state"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_created"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_updated"),
			),
		},
		// remove singular datasource from previous step so that it doesn't conflict with import tests
		{
			Config: config + compartmentIdVariableStr + HostScanRecipeResourceConfig,
		},
		// verify resource import
		{
			Config:                  config,
			ImportState:             true,
			ImportStateVerify:       true,
			ImportStateVerifyIgnore: []string{},
			ResourceName:            resourceName,
		},
	})
}

func testAccCheckVulnerabilityScanningHostScanRecipeDestroy(s *terraform.State) error {
	noResourceFound := true
	client := testAccProvider.Meta().(*OracleClients).vulnerabilityScanningClient()
	for _, rs := range s.RootModule().Resources {
		if rs.Type == "oci_vulnerability_scanning_host_scan_recipe" {
			noResourceFound = false
			request := oci_vulnerability_scanning.GetHostScanRecipeRequest{}

			tmp := rs.Primary.ID
			request.HostScanRecipeId = &tmp

			request.RequestMetadata.RetryPolicy = GetRetryPolicy(true, "vulnerability_scanning")

			response, err := client.GetHostScanRecipe(context.Background(), request)

			if err == nil {
				deletedLifecycleStates := map[string]bool{
					string(oci_vulnerability_scanning.LifecycleStateDeleted): true,
				}
				if _, ok := deletedLifecycleStates[string(response.LifecycleState)]; !ok {
					//resource lifecycle state is not in expected deleted lifecycle states.
					return fmt.Errorf("resource lifecycle state: %s is not in expected deleted lifecycle states", response.LifecycleState)
				}
				//resource lifecycle state is in expected deleted lifecycle states. continue with next one.
				continue
			}

			//Verify that exception is for '404 not found'.
			if failure, isServiceError := common.IsServiceError(err); !isServiceError || failure.GetHTTPStatusCode() != 404 {
				return err
			}
		}
	}
	if noResourceFound {
		return fmt.Errorf("at least one resource was expected from the state file, but could not be found")
	}

	return nil
}

func init() {
	if DependencyGraph == nil {
		initDependencyGraph()
	}
	if !InSweeperExcludeList("VulnerabilityScanningHostScanRecipe") {
		resource.AddTestSweepers("VulnerabilityScanningHostScanRecipe", &resource.Sweeper{
			Name:         "VulnerabilityScanningHostScanRecipe",
			Dependencies: DependencyGraph["hostScanRecipe"],
			F:            sweepVulnerabilityScanningHostScanRecipeResource,
		})
	}
}

func sweepVulnerabilityScanningHostScanRecipeResource(compartment string) error {
	vulnerabilityScanningClient := GetTestClients(&schema.ResourceData{}).vulnerabilityScanningClient()
	hostScanRecipeIds, err := getHostScanRecipeIds(compartment)
	if err != nil {
		return err
	}
	for _, hostScanRecipeId := range hostScanRecipeIds {
		if ok := SweeperDefaultResourceId[hostScanRecipeId]; !ok {
			deleteHostScanRecipeRequest := oci_vulnerability_scanning.DeleteHostScanRecipeRequest{}

			deleteHostScanRecipeRequest.HostScanRecipeId = &hostScanRecipeId

			deleteHostScanRecipeRequest.RequestMetadata.RetryPolicy = GetRetryPolicy(true, "vulnerability_scanning")
			_, error := vulnerabilityScanningClient.DeleteHostScanRecipe(context.Background(), deleteHostScanRecipeRequest)
			if error != nil {
				fmt.Printf("Error deleting HostScanRecipe %s %s, It is possible that the resource is already deleted. Please verify manually \n", hostScanRecipeId, error)
				continue
			}
			WaitTillCondition(testAccProvider, &hostScanRecipeId, hostScanRecipeSweepWaitCondition, time.Duration(3*time.Minute),
				hostScanRecipeSweepResponseFetchOperation, "vulnerability_scanning", true)
		}
	}
	return nil
}

func getHostScanRecipeIds(compartment string) ([]string, error) {
	ids := GetResourceIdsToSweep(compartment, "HostScanRecipeId")
	if ids != nil {
		return ids, nil
	}
	var resourceIds []string
	compartmentId := compartment
	vulnerabilityScanningClient := GetTestClients(&schema.ResourceData{}).vulnerabilityScanningClient()

	listHostScanRecipesRequest := oci_vulnerability_scanning.ListHostScanRecipesRequest{}
	listHostScanRecipesRequest.CompartmentId = &compartmentId
	listHostScanRecipesRequest.LifecycleState = oci_vulnerability_scanning.ListHostScanRecipesLifecycleStateActive
	listHostScanRecipesResponse, err := vulnerabilityScanningClient.ListHostScanRecipes(context.Background(), listHostScanRecipesRequest)

	if err != nil {
		return resourceIds, fmt.Errorf("Error getting HostScanRecipe list for compartment id : %s , %s \n", compartmentId, err)
	}
	for _, hostScanRecipe := range listHostScanRecipesResponse.Items {
		id := *hostScanRecipe.Id
		resourceIds = append(resourceIds, id)
		AddResourceIdToSweeperResourceIdMap(compartmentId, "HostScanRecipeId", id)
	}
	return resourceIds, nil
}

func hostScanRecipeSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
	if hostScanRecipeResponse, ok := response.Response.(oci_vulnerability_scanning.GetHostScanRecipeResponse); ok {
		return hostScanRecipeResponse.LifecycleState != oci_vulnerability_scanning.LifecycleStateDeleted
	}
	return false
}

func hostScanRecipeSweepResponseFetchOperation(client *OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.vulnerabilityScanningClient().GetHostScanRecipe(context.Background(), oci_vulnerability_scanning.GetHostScanRecipeRequest{
		HostScanRecipeId: resourceId,
		RequestMetadata: common.RequestMetadata{
			RetryPolicy: retryPolicy,
		},
	})
	return err
}
