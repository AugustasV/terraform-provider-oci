swagger: "2.0"
x-oracle-package: com.oracle.pic.identity
info:
  version: '20160918'
  title: Identity and Access Management Service API
  description: APIs for managing users, groups, compartments, and policies.
  license:
    name: Oracle Corporation
host: localhost:9000
basePath: /20160918
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
#-----------------------------------------------------------------------------------------------------------------------
# Users
#-----------------------------------------------------------------------------------------------------------------------
  /users/:
    get:
      tags: ['identity']
      summary: ListUsers
      description: |
        Lists the users in your tenancy. You must specify your tenancy's OCID as the value for the
        compartment ID (remember that the tenancy is simply the root compartment).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).
      operationId: ListUsers
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: CreateUser
      description: |
            Creates a new user in your tenancy. For conceptual information about users, your tenancy, and other
            IAM Service components, see [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm).

            You must specify your tenancy's OCID as the compartment ID in the request object (remember that the
            tenancy is simply the root compartment). Notice that IAM resources (users, groups, compartments, and
            some policies) reside within the tenancy itself, unlike cloud resources such as compute instances,
            which typically reside within compartments inside the tenancy. For information about OCIDs, see
            [Resource Identifiers](/Content/General/Concepts/identifiers.htm).

            You must also specify a *name* for the user, which must be unique across all users in your tenancy
            and cannot be changed. Allowed characters: No spaces. Only letters, numerals, hyphens, periods,
            underscores, +, and @. If you specify a name that's already in use, you'll get a 409 error.
            This name will be the user's login to the Console. You might want to pick a
            name that your company's own identity system (e.g., Active Directory, LDAP, etc.) already uses.
            If you delete a user and then create a new user with the same name, they'll be considered different
            users because they have different OCIDs.

            You must also specify a *description* for the user (although it can be an empty string).
            It does not have to be unique, and you can change it anytime with
            [UpdateUser](#/en/identity/20160918/User/UpdateUser). You can use the field to provide the user's
            full name, a description, a nickname, or other information to generally identify the user.

            After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before
            using the object, first make sure its `lifecycleState` has changed to ACTIVE.

            A new user has no permissions until you place the user in one or more groups (see
            [AddUserToGroup](#/en/identity/20160918/UserGroupMembership/AddUserToGroup)). If the user needs to
            access the Console, you need to provide the user a password (see
            [CreateOrResetUIPassword](#/en/identity/20160918/UIPassword/CreateOrResetUIPassword)).
            If the user needs to access the Oracle Cloud Infrastructure REST API, you need to upload a
            public API signing key for that user (see
            [Required Keys and OCIDs](/Content/API/Concepts/apisigningkey.htm) and also
            [UploadApiKey](#/en/identity/20160918/ApiKey/UploadApiKey)).

            **Important:** Make sure to inform the new user which compartment(s) they have access to.
      operationId: CreateUser
      parameters:
        - name: createUserDetails
          description: Request object for creating a new user.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateUserDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20160918/users/
        Host: identity.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
          "description" : "John Smith",
          "name" : "JohnSmith@example.com"
        }
      responses:
        200:
          description: The user is being created.
          schema:
            $ref: '#/definitions/User'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
          examples:
            application-json: |
              {
                "id" : "ocid1.user.oc1..aaaaaaaaqvrabw3qibjmqqmzrywycm2eajlim47naqq3n4mmtcmd2gn5ofna",
                "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
                "name" : "JohnSmith@example.com",
                "description" : "John Smith",
                "lifecycleState" : "ACTIVE",
                "timeCreated" : "2016-11-18T18:13:12.210Z"
              }
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
  /users/{userId}:
    get:
      tags: ['identity']
      summary: GetUser
      description: Gets the specified user's information.
      operationId: GetUser
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
      responses:
        200:
          description: The user was retrieved.
          schema:
            $ref: '#/definitions/User'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeleteUser
      description: Deletes the specified user. The user must not be in any groups.
      operationId: DeleteUser
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The user is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    put:
      tags: ['identity']
      summary: UpdateUser
      description: Updates the description of the specified user.
      operationId: UpdateUser
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - name: updateUserDetails
          description: Request object for updating a user.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateUserDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The user was updated.
          schema:
            $ref: '#/definitions/User'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
  /users/{userId}/apiKeys/:
    get:
      tags: ['identity']
      summary: ListApiKeys
      description: |
        Lists the API signing keys for the specified user. A user can have a maximum of three keys.

        Every user has permission to use this API call for *their own user ID*.  An administrator in your
        organization does not need to write a policy to give users this ability.
      operationId: ListApiKeys
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/ApiKey'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: UploadApiKey
      description: |
        Uploads an API signing key for the specified user.

        Every user has permission to use this operation to upload a key for *their own user ID*. An
        administrator in your organization does not need to write a policy to give users this ability.
        To compare, administrators who have permission to the tenancy can use this operation to upload a
        key for any user, including themselves.

        **Important:** Even though you have permission to upload an API key, you might not yet
        have permission to do much else. If you try calling an operation unrelated to your own credential
        management (e.g., `ListUsers`, `LaunchInstance`) and receive an "unauthorized" error,
        check with an administrator to confirm which IAM Service group(s) you're in and what access
        you have. Also confirm you're working in the correct compartment.

        After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using
        the object, first make sure its `lifecycleState` has changed to ACTIVE.
      operationId: UploadApiKey
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - name: createApiKeyDetails
          description: Request object for uploading an API key for a user.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateApiKeyDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20160918/users/<var>&lt;userId&gt;</var>/apiKeys/
        Host: identity.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "key" : "-----BEGIN PUBLIC KEY-----\cmdnMIIBIjANBgkqhkiG9w0BAQEFA...AOCAQ8AMIIBCgKCAQEA7hglbuGudIO3sgoAa1n/\nHgUdIGeQmwf/QIv3Y0nOEP4TB7rbdCH99oJYzF86M2\nmwIDAQAB\n-----END PUBLIC KEY-----"
        }
      responses:
        200:
          description: The key is being uploaded.
          schema:
            $ref: '#/definitions/ApiKey'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
          examples:
            application-json: |
              {
                "keyId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq/ocid1.user.oc1..aaaaaaaaqvrabw3qibjmqqmzrywycm2eajlim47naqq3n4mmtcmd2gn5ofna/cd:7c:ee:29:8b:2f:c6:48:13:c9:9f:12:66:77:ef:c2",
                "keyValue" : "-----BEGIN PUBLIC KEY-----\cmdnMIIBIjANBgkqhkiG9w0BAQEFA...AOCAQ8AMIIBCgKCAQEA7hglbuGudIO3sgoAa1n/\nHgUdIGeQmwf/QIv3Y0nOEP4TB7rbdCH99oJYzF86M2\nmwIDAQAB\n-----END PUBLIC KEY-----",
                "fingerprint" : "cd:7c:ee:29:8b:2f:c6:48:13:c9:9f:12:66:77:ef:c2",
                "userId" : "ocid1.user.oc1..aaaaaaaaqvrabw3qibjmqqmzrywycm2eajlim47naqq3n4mmtcmd2gn5ofna",
                "lifecycleState" : "ACTIVE",
                "timeCreated" : "2016-12-07T00:59:17.326Z"
              }
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

  /users/{userId}/apiKeys/{fingerprint}:
    delete:
      tags: ['identity']
      summary: DeleteApiKey
      description: |
        Deletes the specified API signing key for the specified user.

        Every user has permission to use this operation to delete a key for *their own user ID*. An
        administrator in your organization does not need to write a policy to give users this ability.
        To compare, administrators who have permission to the tenancy can use this operation to delete
        a key for any user, including themselves.
      operationId: DeleteApiKey
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/KeyFingerprintPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The key is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
  /users/{userId}/uiPassword:
    post:
      tags: ['identity']
      summary: CreateOrResetUIPassword
      description: |
        Creates a new Console one-time password for the specified user. For more information about user
        credentials, see [User Credentials](/Content/Identity/Concepts/usercredentials.htm).

        Use this operation after creating a new user, or if a user forgets their password. The new one-time
        password is returned to you in the response, and you must securely deliver it to the user. They'll
        be prompted to change this password the next time they sign in to the Console. If they don't change
        it within 7 days, the password will expire and you'll need to create a new one-time password for the
        user.

        **Note:** The user's Console login is the unique name you specified when you created the user
        (see [CreateUser](#/en/identity/20160918/User/CreateUser)).
      operationId: CreateOrResetUIPassword
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/RetryTokenHeader'
      responses:
        200:
          description: The new UI password is being created.
          schema:
            $ref: '#/definitions/UIPassword'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
  /users/{userId}/state/:
    put:
      tags: ['identity']
      summary: UpdateUserState
      description: |
        Updates the state of the specified user.
      operationId: UpdateUserState
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - name: updateStateDetails
          description: Request object for updating a user state.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateStateDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The user state was updated.
          schema:
            $ref: '#/definitions/User'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Swift Password
#-----------------------------------------------------------------------------------------------------------------------
  /users/{userId}/swiftPasswords/:
    post:
      tags: ['identity']
      summary: CreateSwiftPassword
      description: |
        Creates a new Swift password for the specified user. For information about what Swift passwords are for, see
        [Managing User Credentials](/Content/Identity/Tasks/managingcredentials.htm).

        You must specify a *description* for the Swift password (although it can be an empty string). It does not
        have to be unique, and you can change it anytime with
        [UpdateSwiftPassword](#/en/identity/20160918/SwiftPassword/UpdateSwiftPassword).

        Every user has permission to create a Swift password for *their own user ID*. An administrator in your organization
        does not need to write a policy to give users this ability. To compare, administrators who have permission to the
        tenancy can use this operation to create a Swift password for any user, including themselves.
      operationId: CreateSwiftPassword
      parameters:
        - name: createSwiftPasswordDetails
          description: Request object for creating a new swift password.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateSwiftPasswordDetails'
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/RetryTokenHeader'
      responses:
        200:
          description: The new Swift password is being created.
          schema:
            $ref: '#/definitions/SwiftPassword'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    get:
      tags: ['identity']
      summary: ListSwiftPasswords
      description: |
        Lists the Swift passwords for the specified user. The returned object contains the password's OCID, but not
        the password itself. The actual password is returned only upon creation.
      operationId: ListSwiftPasswords
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/SwiftPassword'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

  /users/{userId}/swiftPasswords/{swiftPasswordId}:
    put:
      tags: ['identity']
      summary: UpdateSwiftPassword
      description: |
        Updates the specified Swift password's description.
      operationId: UpdateSwiftPassword
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/SwiftPasswordIdPathParam'
        - name: updateSwiftPasswordDetails
          description: Request object for updating a Swift password.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateSwiftPasswordDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The Swift password object was updated.
          schema:
            $ref: '#/definitions/SwiftPassword'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeleteSwiftPassword
      description: |
        Deletes the specified Swift password for the specified user.
      operationId: DeleteSwiftPassword
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/SwiftPasswordIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The Swift password is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

#-----------------------------------------------------------------------------------------------------------------------
# Customer Secret Keys
#-----------------------------------------------------------------------------------------------------------------------
  /users/{userId}/customerSecretKeys/:
    post:
      tags: ['identity']
      summary: CreateCustomerSecretKey
      description: |
        Creates a new secret key for the specified user. Secret keys are used for authentication with the Object Storage Service's Amazon S3
        compatible API. For information, see
        [Managing User Credentials](/Content/Identity/Tasks/managingcredentials.htm).

        You must specify a *description* for the secret key (although it can be an empty string). It does not
        have to be unique, and you can change it anytime with
        [UpdateCustomerSecretKey](#/en/identity/20160918/CustomerSecretKeySummary/UpdateCustomerSecretKey).

        Every user has permission to create a secret key for *their own user ID*. An administrator in your organization
        does not need to write a policy to give users this ability. To compare, administrators who have permission to the
        tenancy can use this operation to create a secret key for any user, including themselves.
      operationId: CreateCustomerSecretKey
      parameters:
        - name: createCustomerSecretKeyDetails
          description: Request object for creating a new secret key.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateCustomerSecretKeyDetails'
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/RetryTokenHeader'
      responses:
        200:
          description: The new secret key is being created.
          schema:
            $ref: '#/definitions/CustomerSecretKey'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    get:
      tags: ['identity']
      summary: ListCustomerSecretKeys
      description: |
        Lists the secret keys for the specified user. The returned object contains the secret key's OCID, but not
        the secret key itself. The actual secret key is returned only upon creation.
      operationId: ListCustomerSecretKeys
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomerSecretKeySummary'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

  /users/{userId}/customerSecretKeys/{customerSecretKeyId}:
    put:
      tags: ['identity']
      summary: UpdateCustomerSecretKey
      description: |
        Updates the specified secret key's description.
      operationId: UpdateCustomerSecretKey
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/CustomerSecretKeyIdPathParam'
        - name: updateCustomerSecretKeyDetails
          description: Request object for updating a secret key.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateCustomerSecretKeyDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: Summary for the secret key that was updated.
          schema:
            $ref: '#/definitions/CustomerSecretKeySummary'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeleteCustomerSecretKey
      description: |
        Deletes the specified secret key for the specified user.
      operationId: DeleteCustomerSecretKey
      parameters:
        - $ref: '#/parameters/UserIdPathParam'
        - $ref: '#/parameters/CustomerSecretKeyIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The secret key is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Groups
#-----------------------------------------------------------------------------------------------------------------------
  /groups/:
    get:
      tags: ['identity']
      summary: ListGroups
      description: |
        Lists the groups in your tenancy. You must specify your tenancy's OCID as the value for
        the compartment ID (remember that the tenancy is simply the root compartment).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).
      operationId: ListGroups
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: CreateGroup
      description: |
        Creates a new group in your tenancy.

        You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
        is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
        reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
        reside within compartments inside the tenancy. For information about OCIDs, see
        [Resource Identifiers](/Content/General/Concepts/identifiers.htm).

        You must also specify a *name* for the group, which must be unique across all groups in your tenancy and
        cannot be changed. You can use this name or the OCID when writing policies that apply to the group. For more
        information about policies, see [How Policies Work](/Content/Identity/Concepts/policies.htm).

        You must also specify a *description* for the group (although it can be an empty string). It does not
        have to be unique, and you can change it anytime with [UpdateGroup](#/en/identity/20160918/Group/UpdateGroup).

        After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
        object, first make sure its `lifecycleState` has changed to ACTIVE.

        After creating the group, you need to put users in it and write policies for it.
        See [AddUserToGroup](#/en/identity/20160918/UserGroupMembership/AddUserToGroup) and
        [CreatePolicy](#/en/identity/20160918/Policy/CreatePolicy).
      operationId: CreateGroup
      parameters:
        - name: createGroupDetails
          description: Request object for creating a new group.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateGroupDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20160918/groups/
        Host: identity.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
          "description" : "Group for network administrators",
          "name" : "NetworkAdmins"
        }
      responses:
        200:
          description: The group is being created.
          schema:
            $ref: '#/definitions/Group'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
          examples:
            application-json: |
              {
                "id" : "ocid1.group.oc1..aaaaaaaavp6jcj3fih7ajegt5nbkw7ueuv5cmdfxoq5lb5wf7jkyu4yxdr4q",
                "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
                "name" : "NetworkAdmins",
                "description" : "Group for network administrators",
                "lifecycleState" : "ACTIVE",
                "timeCreated" : "2016-11-18T22:01:40.936Z"
              }
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
  /groups/{groupId}:
    get:
      tags: ['identity']
      summary: GetGroup
      description: |
        Gets the specified group's information.

        This operation does not return a list of all the users in the group. To do that, use
        [ListUserGroupMemberships](#/en/identity/20160918/UserGroupMembership/ListUserGroupMemberships) and
        provide the group's OCID as a query parameter in the request.
      operationId: GetGroup
      parameters:
        - $ref: '#/parameters/GroupIdPathParam'
      responses:
        200:
          description: The group was retrieved.
          schema:
            $ref: '#/definitions/Group'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeleteGroup
      description: |
        Deletes the specified group. The group must be empty.
      operationId: DeleteGroup
      parameters:
        - $ref: '#/parameters/GroupIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The group is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    put:
      tags: ['identity']
      summary: UpdateGroup
      description: Updates the specified group.
      operationId: UpdateGroup
      parameters:
        - $ref: '#/parameters/GroupIdPathParam'
        - name: updateGroupDetails
          description: Request object for updating a group.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateGroupDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The group is being updated.
          schema:
            $ref: '#/definitions/Group'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Dynamic Groups
#-----------------------------------------------------------------------------------------------------------------------
  /dynamicGroups/:
    get:
      tags: ['identity']
      summary: ListDynamicGroups
      description: |
        Lists the dynamic groups in your tenancy. You must specify your tenancy's OCID as the value for
        the compartment ID (remember that the tenancy is simply the root compartment).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).
      operationId: ListDynamicGroups
      x-obmcs-feature-id:
        - udx-123
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/DynamicGroup'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: CreateDynamicGroup
      description: |
        Creates a new dynamic group in your tenancy.

        You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
        is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
        reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
        reside within compartments inside the tenancy. For information about OCIDs, see
        [Resource Identifiers](/Content/General/Concepts/identifiers.htm).

        You must also specify a *name* for the dynamic group, which must be unique across all dynamic groups in your
        tenancy, and cannot be changed. Note that this name has to be also unique accross all groups in your tenancy.
        You can use this name or the OCID when writing policies that apply to the dynamic group. For more information
        about policies, see [How Policies Work](/Content/Identity/Concepts/policies.htm).

        You must also specify a *description* for the dynamic group (although it can be an empty string). It does not
        have to be unique, and you can change it anytime with [UpdateDynamicGroup](#/en/identity/20160918/DynamicGroup/UpdateDynamicGroup).

        After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
        object, first make sure its `lifecycleState` has changed to ACTIVE.

      operationId: CreateDynamicGroup
      x-obmcs-feature-id:
        - udx-123
      parameters:
        - name: CreateDynamicGroupDetails
          description: Request object for creating a new dynamic group.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateDynamicGroupDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20160918/dynamicGroups/
        Host: identity.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
          "description" : "Instance group for dev compartment",
          "name" : "DevCompartmentDynamicGroup",
          "matchingRule": "instance.compartment.id=ocid1.compartment.oc1..aaaaaaaayd6inozhadasiiaqmttsgqanpxd6ads5tvo6g27ujaygksvivrnq"
        }
      responses:
        200:
          description: The dynamic group is being created.
          schema:
            $ref: '#/definitions/DynamicGroup'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
          examples:
            application-json: |
              {
                "id" : "ocid1.group.oc1..aaaaaaaavp6jcj3fih7ajegt5nbkw7ueuv5cmdfxoq5lb5wf7jkyu4yxdr4q",
                "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
                "name" : "DevCompartmentDynamicGroup",
                "description" : "Dynamic group for dev compartment",
                "matchingRule": "instance.compartment.id=ocid1.compartment.oc1..aaaaaaaayd6inozhadasiiaqmttsgqanpxd6ads5tvo6g27ujaygksvivrnq",
                "lifecycleState" : "ACTIVE",
                "timeCreated" : "2016-11-18T22:01:40.936Z"
              }
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
  /dynamicGroups/{dynamicGroupId}:
    get:
      tags: ['identity']
      summary: GetDynamicGroup
      description: |
        Gets the specified dynamic group's information.

      operationId: GetDynamicGroup
      x-obmcs-feature-id:
        - udx-123
      parameters:
        - $ref: '#/parameters/DynamicGroupIdPathParam'
      responses:
        200:
          description: The dynamic group was retrieved.
          schema:
            $ref: '#/definitions/DynamicGroup'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeleteDynamicGroup
      description: |
        Deletes the specified dynamic group.
      operationId: DeleteDynamicGroup
      x-obmcs-feature-id:
        - udx-123
      parameters:
        - $ref: '#/parameters/DynamicGroupIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The dynamic group is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    put:
      tags: ['identity']
      summary: UpdateDynamicGroup
      description: Updates the specified dynamic group.
      operationId: UpdateDynamicGroup
      x-obmcs-feature-id:
        - udx-123
      parameters:
        - $ref: '#/parameters/DynamicGroupIdPathParam'
        - name: UpdateDynamicGroupDetails
          description: Request object for updating an dynamic group.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateDynamicGroupDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The dynamic group is being updated.
          schema:
            $ref: '#/definitions/DynamicGroup'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Policy
#-----------------------------------------------------------------------------------------------------------------------
  /policies/:
    get:
      tags: ['identity']
      summary: ListPolicies
      description: |
        Lists the policies in the specified compartment (either the tenancy or another of your compartments).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).

        To determine which policies apply to a particular group or compartment, you must view the individual
        statements inside all your policies. There isn't a way to automatically obtain that information via the API.
      operationId: ListPolicies
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/Policy'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: CreatePolicy
      description: |
        Creates a new policy in the specified compartment (either the tenancy or another of your compartments).
        If you're new to policies, see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).

        You must specify a *name* for the policy, which must be unique across all policies in your tenancy
        and cannot be changed.

        You must also specify a *description* for the policy (although it can be an empty string). It does not
        have to be unique, and you can change it anytime with [UpdatePolicy](#/en/identity/20160918/Policy/UpdatePolicy).

        You must specify one or more policy statements in the statements array. For information about writing
        policies, see [How Policies Work](/Content/Identity/Concepts/policies.htm) and
        [Common Policies](/Content/Identity/Concepts/commonpolicies.htm).

        After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
        object, first make sure its `lifecycleState` has changed to ACTIVE.

        New policies take effect typically within 10 seconds.
      operationId: CreatePolicy
      parameters:
        - name: createPolicyDetails
          description: Request object for creating a new policy.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreatePolicyDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20160918/policies/
        Host: identity.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
          "description" : "Policy for users who need to launch instances, attach volumes, manage images",
          "name" : "LaunchInstances",
          "statements":
             [
               "Allow group InstanceLaunchers to manage instance-family in compartment ABC",
               "Allow group InstanceLaunchers to use volume-family in compartment ABC",
               "Allow group InstanceLaunchers to use virtual-network-family in compartment Network"
             ]
        }
      responses:
        200:
          description: The policy is being created.
          schema:
            $ref: '#/definitions/Policy'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
          examples:
            application-json: |
              {
                "statements" :
                  [
                    "Allow group InstanceLaunchers to manage instance-family in compartment ABC",
                    "Allow group InstanceLaunchers to use volume-family in compartment ABC",
                    "Allow group InstanceLaunchers to use virtual-network-family in compartment XYZ"
                  ],
                "id" : "ocid1.policy.oc1..aaaaaaaauzkd2la6gotyy3vcmdv7vgphcf2e753rs3hcl4bau6gtihjrpeua",
                "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
                "name" : "LaunchInstances",
                "description" : "Policy for users who need to launch instances, attach volumes, manage images",
                "lifecycleState" : "ACTIVE",
                "timeCreated" : "2016-12-07T00:49:14.807Z"
              }
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
  /policies/{policyId}:
    get:
      tags: ['identity']
      summary: GetPolicy
      description: Gets the specified policy's information.
      operationId: GetPolicy
      parameters:
        - $ref: '#/parameters/PolicyIdPathParam'
      responses:
        200:
          description: The policy was retrieved.
          schema:
            $ref: '#/definitions/Policy'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeletePolicy
      description: Deletes the specified policy. The deletion takes effect typically within 10 seconds.
      operationId: DeletePolicy
      parameters:
        - $ref: '#/parameters/PolicyIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The policy is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    put:
      tags: ['identity']
      summary: UpdatePolicy
      description: |
        Updates the specified policy. You can update the description or the policy statements themselves.

        Policy changes take effect typically within 10 seconds.
      operationId: UpdatePolicy
      parameters:
        - $ref: '#/parameters/PolicyIdPathParam'
        - name: updatePolicyDetails
          description: Request object for updating a policy.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdatePolicyDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The policy was updated.
          schema:
            $ref: '#/definitions/Policy'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Memberships
#-----------------------------------------------------------------------------------------------------------------------
  /userGroupMemberships/:
    get:
      tags: ['identity']
      summary: ListUserGroupMemberships
      description: |
        Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
        as the value for the compartment ID
        (see [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five)).
        You must also then filter the list in one of these ways:

        - You can limit the results to just the memberships for a given user by specifying a `userId`.
        - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
        - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
        If the answer is no, the response is an empty list.
        - Although`userId` and `groupId` are not indvidually required, you must set one of them.
      operationId: ListUserGroupMemberships
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/UserIdQueryParam'
        - $ref: '#/parameters/GroupIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: Page of `UserGroupMembership` objects matching the specified criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserGroupMembership'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: AddUserToGroup
      description: |
        Adds the specified user to the specified group and returns a `UserGroupMembership` object with its own OCID.

        After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
        object, first make sure its `lifecycleState` has changed to ACTIVE.
      operationId: AddUserToGroup
      parameters:
        - name: addUserToGroupDetails
          description: Request object for adding a user to a group.
          required: true
          in: body
          schema:
            $ref: '#/definitions/AddUserToGroupDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      responses:
        200:
          description: The user is being added to the group.
          schema:
            $ref: '#/definitions/UserGroupMembership'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
  /userGroupMemberships/{userGroupMembershipId}:
    get:
      tags: ['identity']
      summary: GetUserGroupMembership
      description: Gets the specified UserGroupMembership's information.
      operationId: GetUserGroupMembership
      parameters:
        - $ref: '#/parameters/UserGroupMembershipIdPathParam'
      responses:
        200:
          description: The membership was retrieved.
          schema:
            $ref: '#/definitions/UserGroupMembership'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: RemoveUserFromGroup
      description: Removes a user from a group by deleting the corresponding `UserGroupMembership`.
      operationId: RemoveUserFromGroup
      x-related-resource: '#/definitions/UserGroupMembership'
      parameters:
        - $ref: '#/parameters/UserGroupMembershipIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The user is being removed from the group.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Compartment
#-----------------------------------------------------------------------------------------------------------------------
  /compartments/:
    get:
      tags: ['identity']
      summary: ListCompartments
      description: |
        Lists the compartments in your tenancy. You must specify your tenancy's OCID as the value
        for the compartment ID (remember that the tenancy is simply the root compartment).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).
      operationId: ListCompartments
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/Compartment'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: CreateCompartment
      description: |
        Creates a new compartment in your tenancy.

        **Important:** Compartments cannot be deleted.

        You must specify your tenancy's OCID as the compartment ID in the request object. Remember that the tenancy
        is simply the root compartment. For information about OCIDs, see
        [Resource Identifiers](/Content/General/Concepts/identifiers.htm).

        You must also specify a *name* for the compartment, which must be unique across all compartments in
        your tenancy. You can use this name or the OCID when writing policies that apply
        to the compartment. For more information about policies, see
        [How Policies Work](/Content/Identity/Concepts/policies.htm).

        You must also specify a *description* for the compartment (although it can be an empty string). It does
        not have to be unique, and you can change it anytime with
        [UpdateCompartment](#/en/identity/20160918/Compartment/UpdateCompartment).

        After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
        object, first make sure its `lifecycleState` has changed to ACTIVE.
      operationId: CreateCompartment
      parameters:
        - name: createCompartmentDetails
          description: Request object for creating a new compartment.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateCompartmentDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20160918/compartments/
        Host: identity.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
          "description" : "For network components",
          "name" : "Network"
        }
      responses:
        200:
          description: The compartment is being created.
          schema:
            $ref: '#/definitions/Compartment'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
          examples:
            application-json: |
              {
                "id" : "ocid1.compartment.oc1..aaaaaaaayzfqeibduyox6iib3ol6zcmd3ugly4fmameq4h7lcdlihrvur7xq",
                "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
                "name" : "Network",
                "description" : "For network components",
                "lifecycleState" : "ACTIVE",
                "timeCreated" : "2016-11-18T23:01:40.936Z"
              }
        default:
          $ref: '#/responses/DefaultError'
  /compartments/{compartmentId}:
    get:
      tags: ['identity']
      summary: GetCompartment
      description: |
        Gets the specified compartment's information.

        This operation does not return a list of all the resources inside the compartment. There is no single
        API operation that does that. Compartments can contain multiple types of resources (instances, block
        storage volumes, etc.). To find out what's in a compartment, you must call the "List" operation for
        each resource type and specify the compartment's OCID as a query parameter in the request. For example,
        call the [ListInstances](#/en/iaas/20160918/Instance/ListInstances) operation in the Cloud Compute
        Service or the [ListVolumes](#/en/iaas/20160918/Volume/ListVolumes) operation in Cloud Block Storage.
      operationId: GetCompartment
      parameters:
        - $ref: '#/parameters/CompartmentIdPathParam'
      responses:
        200:
          description: The compartment was retrieved.
          schema:
            $ref: '#/definitions/Compartment'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    put:
      tags: ['identity']
      summary: UpdateCompartment
      description: Updates the specified compartment's description or name. You can't update the root compartment.
      operationId: UpdateCompartment
      parameters:
        - $ref: '#/parameters/CompartmentIdPathParam'
        - name: updateCompartmentDetails
          description: Request object for updating a compartment.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateCompartmentDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The compartment is being updated.
          schema:
            $ref: '#/definitions/Compartment'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# AvailabilityDomains
#-----------------------------------------------------------------------------------------------------------------------
  /availabilityDomains/:
    get:
      tags: ['identity']
      summary: ListAvailabilityDomains
      description: |
        Lists the Availability Domains in your tenancy. Specify the OCID of either the tenancy or another
        of your compartments as the value for the compartment ID (remember that the tenancy is simply the root compartment).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).
      operationId: ListAvailabilityDomains
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/AvailabilityDomain'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# FaultDomains
#-----------------------------------------------------------------------------------------------------------------------
  /faultDomains/:
    get:
      tags: ['identity']
      summary: ListFaultDomains
      description: |
        Lists the Fault Domains in your tenancy. Specify the OCID of either the tenancy or another
        of your compartments as the value for the compartment ID (remember that the tenancy is simply the root compartment).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).
      operationId: ListFaultDomains
      x-obmcs-internal-only: true
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/AvailabilityDomainQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/FaultDomain'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Region
#-----------------------------------------------------------------------------------------------------------------------
  /regions:
    get:
      tags: ['identity']
      summary: ListRegions
      description: Lists all the regions offered by Oracle Cloud Infrastructure.
      operationId: ListRegions
      parameters:
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/Region'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Tenancies
#-----------------------------------------------------------------------------------------------------------------------
  /tenancies/{tenancyId}:
    get:
      tags: ['identity']
      summary: GetTenancy
      description: Get the specified tenancy's information.
      operationId: GetTenancy
      parameters:
        - $ref: '#/parameters/TenancyIdPathParam'
      responses:
        200:
          description: The tenancy was retrieved.
          schema:
            $ref: '#/definitions/Tenancy'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
  /tenancies/{tenancyId}/regionSubscriptions:
    post:
      tags: ['identity']
      summary: CreateRegionSubscription
      description: |
        Creates a subscription to a region for a tenancy.

      operationId: CreateRegionSubscription
      parameters:
        - name: CreateRegionSubscriptionDetails
          description: Request object for activate a new region.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateRegionSubscriptionDetails'
        - $ref: '#/parameters/TenancyIdPathParam'
        - $ref: '#/parameters/RetryTokenHeader'
      responses:
        200:
          description: The Region Subscription has been created.
          schema:
            $ref: '#/definitions/RegionSubscription'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    get:
      tags: ['identity']
      summary: ListRegionSubscriptions
      description: Lists the region subscriptions for the specified tenancy.
      operationId: ListRegionSubscriptions
      parameters:
        - $ref: '#/parameters/TenancyIdPathParam'
      responses:
        200:
          description: The list has been retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/RegionSubscription'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Identity providers
#-----------------------------------------------------------------------------------------------------------------------
  /identityProviders/:
    get:
      tags: ['identity']
      summary: ListIdentityProviders
      description: |
        Lists all the identity providers in your tenancy. You must specify the identity provider type (e.g., `SAML2` for
        identity providers using the SAML2.0 protocol). You must specify your tenancy's OCID as the value for the
        compartment ID (remember that the tenancy is simply the root compartment).
        See [Where to Get the Tenancy's OCID and User's OCID](/Content/API/Concepts/apisigningkey.htm#five).

      operationId: ListIdentityProviders
      parameters:
        - $ref: '#/parameters/IdentityProviderProtocolQueryParam'
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/IdentityProvider'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    post:
      tags: ['identity']
      summary: CreateIdentityProvider
      description: |
            Creates a new identity provider in your tenancy. For more information, see
            [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).

            You must specify your tenancy's OCID as the compartment ID in the request object.
            Remember that the tenancy is simply the root compartment. For information about
            OCIDs, see [Resource Identifiers](/Content/General/Concepts/identifiers.htm).

            You must also specify a *name* for the `IdentityProvider`, which must be unique
            across all `IdentityProvider` objects in your tenancy and cannot be changed.

            You must also specify a *description* for the `IdentityProvider` (although
            it can be an empty string). It does not have to be unique, and you can change
            it anytime with
            [UpdateIdentityProvider](#/en/identity/20160918/IdentityProvider/UpdateIdentityProvider).

            After you send your request, the new object's `lifecycleState` will temporarily
            be CREATING. Before using the object, first make sure its `lifecycleState` has
            changed to ACTIVE.
      operationId: CreateIdentityProvider
      parameters:
        - name: createIdentityProviderDetails
          description: Request object for creating a new SAML2 identity provider.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateIdentityProviderDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      responses:
        200:
          description: The identity provider is being created.
          schema:
            $ref: '#/definitions/IdentityProvider'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

  /identityProviders/{identityProviderId}:
    get:
      tags: ['identity']
      summary: GetIdentityProvider
      description: Gets the specified identity provider's information.
      operationId: GetIdentityProvider
      parameters:
        - $ref: '#/parameters/IdentityProviderIdPathParam'
      responses:
        200:
          description: The user was found.
          schema:
            $ref: '#/definitions/IdentityProvider'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeleteIdentityProvider
      description: |
        Deletes the specified identity provider. The identity provider must not have
        any group mappings (see [IdpGroupMapping](#/en/identity/20160918/IdpGroupMapping/)).
      operationId: DeleteIdentityProvider
      parameters:
        - $ref: '#/parameters/IdentityProviderIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The identity provider is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    put:
      tags: ['identity']
      summary: UpdateIdentityProvider
      description: Updates the specified identity provider.
      operationId: UpdateIdentityProvider
      parameters:
        - $ref: '#/parameters/IdentityProviderIdPathParam'
        - name: updateIdentityProviderDetails
          description: Request object for updating a identity provider.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateIdentityProviderDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The identity provider is being updated.
          schema:
            $ref: '#/definitions/IdentityProvider'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
  /identityProviders/{identityProviderId}/groupMappings/:
    post:
      tags: ['identity']
      summary: CreateIdpGroupMapping
      description: |
          Creates a single mapping between an IdP group and an IAM Service
          [group](#/en/identity/20160918/Group/).
      operationId: CreateIdpGroupMapping
      parameters:
        - name: createIdpGroupMappingDetails
          description: Add a mapping from an SAML2.0 identity provider group to a BMC group.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateIdpGroupMappingDetails'
        - $ref: '#/parameters/IdentityProviderIdPathParam'
        - $ref: '#/parameters/RetryTokenHeader'
      responses:
        200:
          description: The mapping is being created.
          schema:
            $ref: '#/definitions/IdpGroupMapping'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    get:
      tags: ['identity']
      summary: ListIdpGroupMappings
      description: |
        Lists the group mappings for the specified identity provider.
      operationId: ListIdpGroupMappings
      parameters:
        - $ref: '#/parameters/IdentityProviderIdPathParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/IdpGroupMapping'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of items. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

  /identityProviders/{identityProviderId}/groupMappings/{mappingId}:
    get:
      tags: ['identity']
      summary: GetIdpGroupMapping
      description: Gets the specified group mapping.
      operationId: GetIdpGroupMapping
      parameters:
        - $ref: '#/parameters/IdentityProviderIdPathParam'
        - $ref: '#/parameters/IdpGroupMappingIdPathParam'
      responses:
        200:
          description: The mapping is being retrieved.
          schema:
            $ref: '#/definitions/IdpGroupMapping'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    put:
      tags: ['identity']
      summary: UpdateIdpGroupMapping
      description: Updates the specified group mapping.
      operationId: UpdateIdpGroupMapping
      parameters:
        - $ref: '#/parameters/IdentityProviderIdPathParam'
        - $ref: '#/parameters/IdpGroupMappingIdPathParam'
        - name: updateIdpGroupMappingDetails
          description: Request object for updating an identity provider group mapping
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateIdpGroupMappingDetails'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        200:
          description: The identity provider is being updated.
          schema:
            $ref: '#/definitions/IdpGroupMapping'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            etag:
              type: string
              description: For optimistic concurrency control. See `if-match`.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
    delete:
      tags: ['identity']
      summary: DeleteIdpGroupMapping
      description: Deletes the specified group mapping.
      operationId: DeleteIdpGroupMapping
      parameters:
        - $ref: '#/parameters/IdentityProviderIdPathParam'
        - $ref: '#/parameters/IdpGroupMappingIdPathParam'
        - $ref: '#/parameters/IfMatchHeader'
      responses:
        204:
          description: The mapping is being deleted.
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        412:
          $ref: '#/responses/412'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# TagNamespaces
#-----------------------------------------------------------------------------------------------------------------------
  /tagNamespaces:
    get:
      tags: ['identity']
      summary: ListTagNamespaces
      description: |
        Lists the tag namespaces in the specified compartment.
      operationId: ListTagNamespaces
      parameters:
        - $ref: '#/parameters/CompartmentIdQueryParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
        - name: includeSubcompartments
          in: query
          required: false
          type: boolean
          description: |
            An optional boolean parameter indicating whether to retrieve all tag namespaces in subcompartments. If this
            parameter is not specified, only the tag namespaces defined in the specified compartment are retrieved.
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/TagNamespaceSummary'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of tagNamespaces. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

    post:
      tags: ['identity']
      summary: CreateTagNamespace
      description: |
            Creates a new tag namespace in the specified compartment.

            You must specify the compartment ID in the request object (remember that the tenancy is simply the root
            compartment).

            You must also specify a *name* for the namespace, which must be unique across all namespaces in your tenancy
            and cannot be changed. The name can contain any ASCII character except the space (_) or period (.).
            Names are case insensitive. That means, for example, "myNamespace" and "mynamespace" are not allowed
            in the same tenancy. Once you created a namespace, you cannot change the name.
            If you specify a name that's already in use in the tenancy, a 409 error is returned.

            You must also specify a *description* for the namespace.
            It does not have to be unique, and you can change it with
            [UpdateTagNamespace](#/en/tagging/20170101/TagNamespace/UpdateTagNamespace).

            Tag namespaces cannot be deleted, but they can be retired.
            See [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring) for more information.

      operationId: CreateTagNamespace
      parameters:
        - name: CreateTagNamespaceDetails
          description: Request object for creating a new tag namespace.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateTagNamespaceDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20170901/tagNamespaces/
        Host: tagging.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
          "name" : "BillingTags",
          "description" : "This namespace contains tags that will be used in billing.",
        }
      responses:
        200:
          description: The tagNamespace is being created.
          schema:
            $ref: '#/definitions/TagNamespace'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
          examples:
            application-json: |
              {
                "id" : "ocid1.namespace.oc1..aaaaaaaaqvrabw3qibjmqqmzrywycm2eajlim47naqq3n4mmtcmd2gn5ofna",
                "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
                "name" : "BillingTags",
                "description" : "This namespace contains tags that will be used in billing.",
                "isRetired" : "false",
                "timeCreated" : "2017-09-01T18:13:12.210Z"
              }
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

  /tagNamespaces/{tagNamespaceId}:
    get:
      tags: ["identity"]
      summary: GetTagNamespace
      description: |
        Gets the specified tag namespace's information.
      operationId: GetTagNamespace
      parameters:
        - $ref: '#/parameters/tagNamespaceIdPathParam'
      responses:
        200:
          description: The tagNamespace was retrieved.
          schema:
            $ref: '#/definitions/TagNamespace'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

    put:
      tags: ["identity"]
      summary: UpdateTagNamespace
      description: |
        Updates the the specified tag namespace. You can't update the namespace name.

        Updating `isRetired` to 'true' retires the namespace and all the tag definitions in the namespace. Reactivating a
        namespace (changing `isRetired` from 'true' to 'false') does not reactivate tag definitions.
        To reactivate the tag definitions, you must reactivate each one indvidually *after* you reactivate the namespace,
        using [UpdateTag](#/en/identity/20160918/Tag/UpdateTag). For more information about retiring tag namespaces, see
        [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring).

        You can't add a namespace with the same name as a retired namespace in the same tenancy.
      operationId: UpdateTagNamespace
      parameters:
        - $ref: '#/parameters/tagNamespaceIdPathParam'
        - name: UpdateTagNamespaceDetails
          description: Request object for updating a namespace.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateTagNamespaceDetails'
      responses:
        200:
          description: The tagNamespace was updated.
          schema:
            $ref: '#/definitions/TagNamespace'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#-----------------------------------------------------------------------------------------------------------------------
# Tags
#-----------------------------------------------------------------------------------------------------------------------
  /tagNamespaces/{tagNamespaceId}/tags:
    get:
      tags: ['identity']
      summary: ListTags
      description: |
        Lists the tag definitions in the specified tag namespace.
      operationId: ListTags
      parameters:
        - $ref: '#/parameters/tagNamespaceIdPathParam'
        - $ref: '#/parameters/PaginationTokenQueryParam'
        - $ref: '#/parameters/PaginationLimitQueryParam'
      responses:
        200:
          description: The list is being retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/TagSummary'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
            opc-next-page:
              type: string
              description: |
                For pagination of a list of tags. When paging through a list, if this header appears in the response,
                then a partial list might have been returned. Include this value as the `page` parameter for the
                subsequent GET request to get the next batch of items.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

    post:
      tags: ['identity']
      summary: CreateTag
      description: |
            Creates a new tag in the specified tag namespace.

            You must specify either the OCID or the name of the tag namespace that will contain this tag definition.

            You must also specify a *name* for the tag, which must be unique across all tags in the tag namespace
            and cannot be changed. The name can contain any ASCII character except the space (_) or period (.) characters.
            Names are case insensitive. That means, for example, "myTag" and "mytag" are not allowed in the same namespace.
            If you specify a name that's already in use in the tag namespace, a 409 error is returned.

            You must also specify a *description* for the tag.
            It does not have to be unique, and you can change it with
            [UpdateTag](#/en/tagging/20170901/Tag/UpdateTag).

      operationId: CreateTag
      parameters:
        - $ref: '#/parameters/tagNamespaceIdPathParam'
        - name: CreateTagDetails
          description: Request object for creating a new tag in the specified tag namespace.
          required: true
          in: body
          schema:
            $ref: '#/definitions/CreateTagDetails'
        - $ref: '#/parameters/RetryTokenHeader'
      x-example: |
        POST /20170901/tagNamespaces/ocid1.tagnamespace.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq/tags
        Host: tagging.us-phoenix-1.oraclecloud.com
        <var>&lt;authorization and other headers&gt;</var>
        {
          "name" : "CostCenter",
          "description" : "This tag will show the cost center that will be used for billing of associated resources.",
          "type" : "string"
        }
      responses:
        200:
          description: The tag is being created.
          schema:
            $ref: '#/definitions/Tag'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
          examples:
            application-json: |
              {
                "name" : "CostCenter",
                "description" : "This tag will show the cost center that will be used for billing of associated resources.",
                "type" : "string",
                "tagNamespaceId" : "ocid1.namespace.oc1..aaaaaaaaqvrabw3qibjmqqmzrywycm2eajlim47naqq3n4mmtcmd2gn5ofna",
                "tagNameSpaceName" : "BillingTags",
                "compartmentId" : "ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f44n2b2cmdt2j6rx32uzr4h25vqstifsfdsq",
                "isRetired" : "false",
                "timeCreated" : "2017-09-01T18:13:12.210Z"
              }
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

  /tagNamespaces/{tagNamespaceId}/tags/{tagName}:
    get:
      tags: ["identity"]
      summary: GetTag
      description: Gets the specified tag's information.
      operationId: GetTag
      parameters:
        - $ref: '#/parameters/tagNamespaceIdPathParam'
        - $ref: '#/parameters/tagNamePathParam'
      responses:
        200:
          description: The tag was retrieved.
          schema:
            $ref: '#/definitions/Tag'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'

    put:
      tags: ["identity"]
      summary: UpdateTag
      description: |
        Updates the the specified tag definition. You can update `description`, and `isRetired`.
      operationId: UpdateTag
      parameters:
        - $ref: '#/parameters/tagNamespaceIdPathParam'
        - $ref: '#/parameters/tagNamePathParam'
        - name: UpdateTagDetails
          description: Request object for updating a tag.
          required: true
          in: body
          schema:
            $ref: '#/definitions/UpdateTagDetails'
      responses:
        200:
          description: The tag was updated.
          schema:
            $ref: '#/definitions/Tag'
          headers:
            opc-request-id:
              type: string
              description: |
                Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
                particular request, please provide the request ID.
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
        default:
          $ref: '#/responses/DefaultError'
#=======================================================================================================================
definitions:
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: string
        description: |
          A short error code that defines the error, meant for programmatic parsing. See
          [API Errors](/Content/API/References/apierrors.htm).
      message:
        type: string
        description: A human-readable error string.
#=======================================================================================================================
# Definitions of Primary Entities
#=======================================================================================================================
  User:
    description: |
      An individual employee or system that needs to manage or use your company's Oracle Cloud Infrastructure
      resources. Users might need to launch instances, manage remote disks, work with your cloud network, etc. Users
      have one or more IAM Service credentials ([ApiKey](#/en/identity/20160918/ApiKey/),
      [UIPassword](#/en/identity/20160918/UIPassword/), and [SwiftPassword](#/en/identity/20160918/SwiftPassword/)).
      For more information, see [User Credentials](/Content/API/Concepts/usercredentials.htm)). End users of your
      application are not typically IAM Service users. For conceptual information about users and other IAM Service
      components, see [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm).

      These users are created directly within the Oracle Cloud Infrastructure system, via the IAM service.
      They are different from *federated users*, who authenticate themselves to the Oracle Cloud Infrastructure
      Console via an identity provider. For more information, see
      [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator. If you're an administrator who needs to write policies to give users access,
      see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
    required:
      - id
      - compartmentId
      - name
      - description
      - timeCreated
      - lifecycleState
    properties:
      id:
        type: string
        description: The OCID of the user.
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the user.
      name:
        type: string
        description: |
          The name you assign to the user during creation. This is the user's login for the Console.
          The name must be unique across all users in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the user. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the user was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The user's current state. After creating a user, make sure its `lifecycleState` changes from CREATING to
          ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: |
          Returned only if the user's `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user
          is inactive:

          - bit 0: SUSPENDED (reserved for future use)
          - bit 1: DISABLED (reserved for future use)
          - bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  Group:
    description: |
      A collection of users who all need the same type of access to a particular set of resources or compartment.
      For conceptual information about groups and other IAM Service components, see
      [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm).

      If you're federating with an identity provider (IdP), you need to create mappings between the groups
      defined in the IdP and groups you define in the IAM service. For more information, see
      [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm). Also see
      [IdentityProvider](#/en/identity/20160918/IdentityProvider/) and
      [IdpGroupMapping](#/en/identity/20160918/IdpGroupMapping/).

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator. If you're an administrator who needs to write policies to give users access,
      see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
    required:
      - id
      - compartmentId
      - name
      - description
      - timeCreated
      - lifecycleState
    properties:
      id:
        type: string
        description: The OCID of the group.
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the group.
      name:
        type: string
        description: |
          The name you assign to the group during creation. The name must be unique across all groups in
          the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the group. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the group was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The group's current state. After creating a group, make sure its `lifecycleState` changes from CREATING to
          ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  DynamicGroup:
    description: |
      A dynamic group defines a matching rule. Every bare metal or virtual machine instance is deployed with an instance certificate.
      The certificate contains metadata about the instance. This includes the instance OCID and the compartment OCID, along
      with a few other optional properties. When an API call is made using this instance certificate as the authenticator,
      the certificate can be matched to one or multiple dynamic groups. The instance can then get access to the API
      based on the permissions granted in policies written for the dynamic groups.

      This works like regular user/group membership. But in that case, the membership is a static relationship, whereas
      in a dynamic group, the membership of an instance certificate to a dynamic group is determined during runtime.
      For more information, see [Managing Dynamic Groups](/Content/Identity/Tasks/managingdynamicgroups.htm).
    required:
      - id
      - compartmentId
      - name
      - description
      - matchingRule
      - timeCreated
      - lifecycleState
    x-obmcs-feature-id:
      - udx-123
    properties:
      id:
        type: string
        description: The OCID of the group.
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the group.
      name:
        type: string
        description: |
          The name you assign to the group during creation. The name must be unique across all groups in
          the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the group. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      matchingRule:
        type: string
        description: |
         A rule string that defines which instance certificates will be matched.
         For syntax, see [Managing Dynamic Groups](/Content/Identity/Tasks/managingdynamicgroups.htm).
        minLength: 1
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the group was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The group's current state. After creating a group, make sure its `lifecycleState` changes from CREATING to
          ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
 #-----------------------------------------------------------------------------------------------------------------------
  Compartment:
    description: |
      A collection of related resources. Compartments are a fundamental component of Oracle Cloud Infrastructure
      for organizing and isolating your cloud resources. You use them to clearly separate resources for the purposes
      of measuring usage and billing, access (through the use of IAM Service policies), and isolation (separating the
      resources for one project or business unit from another). A common approach is to create a compartment for each
      major part of your organization. For more information, see
      [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm) and also
      [Setting Up Your Tenancy](/Content/GSG/Concepts/settinguptenancy.htm).

      To place a resource in a compartment, simply specify the compartment ID in the "Create" request object when
      initially creating the resource. For example, to launch an instance into a particular compartment, specify
      that compartment's OCID in the `LaunchInstance` request. You can't move an existing resource from one
      compartment to another.

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator. If you're an administrator who needs to write policies to give users access,
      see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
    required:
      - id
      - compartmentId
      - name
      - description
      - timeCreated
      - lifecycleState
    properties:
      id:
        type: string
        description: The OCID of the compartment.
      compartmentId:
         type: string
         description: The OCID of the tenancy containing the compartment.
      name:
        type: string
        description: |
          The name you assign to the compartment during creation. The name must be unique across all
          compartments in the tenancy.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the compartment. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the compartment was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The compartment's current state. After creating a compartment, make sure its `lifecycleState` changes from
          CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  Policy:
    description: |
      A document that specifies the type of access a group has to the resources in a compartment. For information about
      policies and other IAM Service components, see
      [Overview of the IAM Service](/Content/Identity/Concepts/overview.htm). If you're new to policies, see
      [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).

      The word "policy" is used by people in different ways:

        * An individual statement written in the policy language
        * A collection of statements in a single, named "policy" document (which has an Oracle Cloud ID (OCID) assigned to it)
        * The overall body of policies your organization uses to control access to resources

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator.
    required:
      - id
      - compartmentId
      - name
      - statements
      - description
      - timeCreated
      - lifecycleState
    properties:
      id:
        type: string
        description: The OCID of the policy.
      compartmentId:
        type: string
        description: |
          The OCID of the compartment containing the policy (either the tenancy or another compartment).
      name:
        type: string
        description: |
          The name you assign to the policy during creation. The name must be unique across all policies
          in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      statements:
        type: array
        items:
          type: string
        description:  An array of one or more policy statements written in the policy language.
      description:
        type: string
        description: The description you assign to the policy. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the policy was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The policy's current state. After creating a policy, make sure its `lifecycleState` changes from CREATING to
          ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
      versionDate:
        type: string
        format: date-time
        description: |
          The version of the policy. If null or set to an empty string, when a request comes in for authorization, the
          policy will be evaluated according to the current behavior of the services at that moment. If set to a particular
          date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  UserGroupMembership:
    description: |
      An object that represents the membership of a user in a group. When you add a user to a group, the result is a
      `UserGroupMembership` with its own OCID. To remove a user from a group, you delete the `UserGroupMembership` object.
    required:
      - id
      - compartmentId
      - timeCreated
      - lifecycleState
      - groupId
      - userId
    properties:
      id:
        type: string
        description: The OCID of the membership.
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the user, group, and membership object.
      groupId:
        type: string
        description: The OCID of the group.
      userId:
        type: string
        description: The OCID of the user.
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the membership was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The membership's current state.  After creating a membership object, make sure its `lifecycleState` changes
          from CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
#-----------------------------------------------------------------------------------------------------------------------
  Saml2IdentityProvider:
    description: |
      A special type of [IdentityProvider](#/en/identity/20160918/IdentityProvider/) that
      supports the SAML 2.0 protocol. For more information, see
      [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).
    allOf:
    - $ref: '#/definitions/IdentityProvider'
    - discriminator: SAML2
      properties:
        metadataUrl:
          type: string
          description: |
            The URL for retrieving the identity provider's metadata, which
            contains information required for federating.
          minLength: 1
          maxLength: 512
        signingCertificate:
          type: string
          description: |
            The identity provider's signing certificate used by the IAM Service
            to validate the SAML2 token.
          minLength: 1
          maxLength: 10000
        redirectUrl:
          type: string
          description: |
            The URL to redirect federated users to for authentication with the
            identity provider.
          minLength: 1
          maxLength: 512
      required:
        - signingCertificate
        - redirectUrl
        - metadataUrl
  IdentityProvider:
    description: |
      The resulting base object when you add an identity provider to your tenancy. A
      [Saml2IdentityProvider](#/en/identity/20160918/Saml2IdentityProvider/)
      is a specific type of `IdentityProvider` that supports the SAML 2.0 protocol. Each
      `IdentityProvider` object has its own OCID. For more information, see
      [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator. If you're an administrator who needs to write policies to give users access,
      see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
    discriminator: protocol
    properties:
      id:
        type: string
        description: The OCID of the `IdentityProvider`.
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the `IdentityProvider`.
      name:
        type: string
        description: |
          The name you assign to the `IdentityProvider` during creation. The name
          must be unique across all `IdentityProvider` objects in the tenancy and
          cannot be changed. This is the name federated users see when choosing
          which identity provider to use when signing in to the Oracle Cloud Infrastructure
          Console.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: |
          The description you assign to the `IdentityProvider` during creation. Does
          not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      productType:
        description: |
          The identity provider service or product.
          Supported identity providers are Oracle Identity Cloud Service (IDCS) and Microsoft
          Active Directory Federation Services (ADFS).

          Allowed values are:
          - `ADFS`
          - `IDCS`

          Example: `IDCS`
        type: string
        maxLength: 64
        minLength: 1
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the `IdentityProvider` was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The current state. After creating an `IdentityProvider`, make sure its
          `lifecycleState` changes from CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
      protocol:
        description: |
          The protocol used for federation. Allowed value: `SAML2`.

          Example: `SAML2`
        maxLength: 64
        minLength: 1
        type: string
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
    required:
      - id
      - compartmentId
      - name
      - description
      - productType
      - timeCreated
      - lifecycleState
      - protocol
#-----------------------------------------------------------------------------------------------------------------------
  IdpGroupMapping:
    description: |
      A mapping between a single group defined by the identity provider (IdP) you're federating with
      and a single IAM Service [group](#/en/identity/20160918/Group/) in Oracle Cloud Infrastructure.
      For more information about group mappings and what they're for, see
      [Identity Providers and Federation](/Content/Identity/Concepts/federation.htm).

      A given IdP group can be mapped to zero, one, or multiple IAM Service groups, and vice versa.
      But each `IdPGroupMapping` object is between only a single IdP group and IAM Service group.
      Each `IdPGroupMapping` object has its own OCID.

      **Note:** Any users who are in more than 50 IdP groups cannot be authenticated to use the Oracle
      Cloud Infrastructure Console.
    required:
      - id
      - idpId
      - idpGroupName
      - groupId
      - compartmentId
      - timeCreated
      - lifecycleState
    properties:
      id:
        type: string
        description: The OCID of the `IdpGroupMapping`.
      idpId:
        type: string
        description: The OCID of the `IdentityProvider` this mapping belongs to.
      idpGroupName:
        type: string
        description: The name of the IdP group that is mapped to the IAM Service group.
      groupId:
        type: string
        description: The OCID of the IAM Service group that is mapped to the IdP group.
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the `IdentityProvider`.
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the mapping was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The mapping's current state.  After creating a mapping object, make sure its `lifecycleState` changes
          from CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
  #-----------------------------------------------------------------------------------------------------------------------
  TagNamespace:
    description: |
      A managed container for defined tags. A tag namespace is unique in a tenancy. A tag namespace can't be deleted.
      For more information, see [Managing Tags and Tag Namespaces](/Content/Identity/Concepts/taggingoverview.htm).
    required:
      - id
      - compartmentId
      - name
      - description
      - isRetired
      - timeCreated
    properties:
      id:
        type: string
        description: The OCID of the tag namespace.
        minLength: 1
        maxLength: 100
      compartmentId:
        type: string
        description: The OCID of the compartment that contains the tag namespace.
        minLength: 1
        maxLength: 100
      name:
        type: string
        description: |
          The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the tag namespace.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
      isRetired:
        type: boolean
        description: |
          Whether the tag namespace is retired.
          See [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring).
      timeCreated:
        type: string
        format: date-time
        description: |
          Date and time the tagNamespace was created, in the format defined by RFC3339.
          Example: `2016-08-25T21:10:29.600Z`
  #-----------------------------------------------------------------------------------------------------------------------
  TagSummary:
    description: |
        A tag definition that belongs to a specific tag namespace.
    properties:
      compartmentId:
        type: string
        description: The OCID of the compartment that contains the tag definition.
        minLength: 1
        maxLength: 100
      id:
        type: string
        description: The OCID of the tag definition.
        minLength: 1
        maxLength: 100
      name:
        type: string
        description: |
          The name of the tag. The name must be unique across all tags in the tag namespace and can't be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the tag.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
      isRetired:
        type: boolean
        description: |
          Whether the tag is retired.
          See [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring).
      timeCreated:
        type: string
        format: date-time
        description: |
          Date and time the tag was created, in the format defined by RFC3339.
          Example: `2016-08-25T21:10:29.600Z`
  #-----------------------------------------------------------------------------------------------------------------------
  Tag:
    description: |
      A tag definition that belongs to a specific tag namespace.  "Defined tags" must be set up in your tenancy before
      you can apply them to resources.
      For more information, see [Managing Tags and Tag Namespaces](/Content/Identity/Concepts/taggingoverview.htm).
    required:
      - compartmentId
      - tagNamespaceId
      - tagNamespaceName
      - id
      - name
      - description
      - isRetired
      - timeCreated
    properties:
      compartmentId:
        type: string
        description: The OCID of the compartment that contains the tag definition.
        minLength: 1
        maxLength: 100
      tagNamespaceId:
        type: string
        description: The OCID of the namespace that contains the tag definition.
        minLength: 1
        maxLength: 100
      tagNamespaceName:
        type: string
        description: |
          The name of the tag namespace that contains the tag definition.
        minLength: 1
        maxLength: 100
      id:
        type: string
        description: The OCID of the tag definition.
        minLength: 1
        maxLength: 100
      name:
        type: string
        description: |
          The name of the tag. The name must be unique across all tags in the namespace and can't be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the tag.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}``
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
      isRetired:
        type: boolean
        description: |
          Indicates whether the tag is retired.
          See [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring).
      timeCreated:
        type: string
        format: date-time
        description: |
          Date and time the tag was created, in the format defined by RFC3339.
          Example: `2016-08-25T21:10:29.600Z`
#=======================================================================================================================
# Definitions of CreationDetails
#=======================================================================================================================
  CreateUserDetails:
    required:
      - name
      - compartmentId
      - description
    properties:
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the user.
      name:
        type: string
        description: |
          The name you assign to the user during creation. This is the user's login for the Console.
          The name must be unique across all users in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the user during creation. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  CreateGroupDetails:
    required:
      - name
      - compartmentId
      - description
    properties:
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the group.
      name:
        type: string
        description: |
          The name you assign to the group during creation. The name must be unique across all groups
          in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the group during creation. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  CreateDynamicGroupDetails:
    description: Properties for creating a dynamic group.
    required:
      - name
      - compartmentId
      - matchingRule
      - description
    x-obmcs-feature-id:
      - udx-123
    properties:
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the group.
      name:
        type: string
        description: |
          The name you assign to the group during creation. The name must be unique across all groups
          in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      matchingRule:
        type: string
        description: |
         The matching rule to dynamically match an instance certificate to this dynamic group.
         For rule syntax, see [Managing Dynamic Groups](/Content/Identity/Tasks/managingdynamicgroups.htm).
        minLength: 1
      description:
        type: string
        description: The description you assign to the group during creation. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
#-----------------------------------------------------------------------------------------------------------------------
  CreateApiKeyDetails:
    required:
      - key
    properties:
      key:
        type: string
        description: The public key.  Must be an RSA key in PEM format.
#-----------------------------------------------------------------------------------------------------------------------
  CreateCompartmentDetails:
    required:
      - name
      - compartmentId
      - description
    properties:
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the compartment.
      name:
        type: string
        description: |
          The name you assign to the compartment during creation. The name must be unique across all compartments
          in the tenancy.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: |
          The description you assign to the compartment during creation. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
 #-----------------------------------------------------------------------------------------------------------------------
  CreatePolicyDetails:
    required:
      - name
      - compartmentId
      - statements
      - description
    properties:
      compartmentId:
        type: string
        description: The OCID of the compartment containing the policy (either the tenancy or another compartment).
      name:
        type: string
        description: |
          The name you assign to the policy during creation. The name must be unique across all policies
          in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      statements:
        type: array
        items:
          type: string
        description: |
          An array of policy statements written in the policy language. See
          [How Policies Work](/Content/Identity/Concepts/policies.htm) and
          [Common Policies](/Content/Identity/Concepts/commonpolicies.htm).
      description:
        type: string
        description: |
          The description you assign to the policy during creation. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      versionDate:
        type: string
        format: date-time
        description: |
          The version of the policy. If null or set to an empty string, when a request comes in for authorization, the
          policy will be evaluated according to the current behavior of the services at that moment. If set to a particular
          date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
 #-----------------------------------------------------------------------------------------------------------------------
  CreateSwiftPasswordDetails:
    required:
      - description
    properties:
      description:
        type: string
        description: |
          The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
#-----------------------------------------------------------------------------------------------------------------------
  CreateSaml2IdentityProviderDetails:
    allOf:
    - $ref: '#/definitions/CreateIdentityProviderDetails'
    - discriminator: SAML2
      properties:
        metadataUrl:
          type: string
          description: |
            The URL for retrieving the identity provider's metadata,
            which contains information required for federating.
          minLength: 1
          maxLength: 512
        metadata:
          type: string
          description: |
            The XML that contains the information required for federating.
          minLength: 1
          maxLength: 100000
      required:
        - metadataUrl
        - metadata
  CreateIdentityProviderDetails:
    discriminator: protocol
    properties:
      compartmentId:
        type: string
        description: The OCID of your tenancy.
      name:
        type: string
        description: |
          The name you assign to the `IdentityProvider` during creation.
          The name must be unique across all `IdentityProvider` objects in the
          tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: |
          The description you assign to the `IdentityProvider` during creation.
          Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      productType:
        description: |
          The identity provider service or product.
          Supported identity providers are Oracle Identity Cloud Service (IDCS) and Microsoft
          Active Directory Federation Services (ADFS).

          Example: `IDCS`
        type: string
        enum:
        - IDCS
        - ADFS
      protocol:
        description: |
          The protocol used for federation.

          Example: `SAML2`
        type: string
        enum:
        - SAML2
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
    required:
      - name
      - compartmentId
      - productType
      - description
      - protocol
#-----------------------------------------------------------------------------------------------------------------------
  CreateIdpGroupMappingDetails:
    required:
      - idpGroupName
      - groupId
    properties:
      idpGroupName:
        type: string
        description: The name of the IdP group you want to map.
      groupId:
        type: string
        description: |
          The OCID of the IAM Service [group](#/en/identity/20160918/Group/)
          you want to map to the IdP group.
  CreateCustomerSecretKeyDetails:
    required:
      - displayName
    properties:
      displayName:
        type: string
        description: |
          The name you assign to the secret key during creation. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 200
#----------------------------------------------Tagging definitions-----------------------------------------------------
  TagNamespaceSummary:
     description: |
       A container for defined tags.
     properties:
      id:
        type: string
        description: The OCID of the tag namespace.
      compartmentId:
        type: string
        description: The OCID of the compartment that contains the tag namespace.
      name:
        type: string
        description: |
          The name of the tag namespace. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the tag namespace.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
      isRetired:
        type: boolean
        description: |
          Whether the tag namespace is retired.
          For more information, see [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring).
      timeCreated:
        type: string
        format: date-time
        description: |
          Date and time the tagNamespace was created, in the format defined by RFC3339.
          Example: `2016-08-25T21:10:29.600Z`
#-----------------------------------------------------------------------------------------------------------------------
  CreateTagNamespaceDetails:
    required:
      - name
      - compartmentId
      - description
    properties:
      compartmentId:
        type: string
        description: The OCID of the tenancy containing the tag namespace.
      name:
        type: string
        description: |
          The name you assign to the tag namespace during creation. It must be unique across all tag namespaces in the tenancy and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the tag namespace during creation.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  CreateTagDetails:
    required:
      - name
      - description
    properties:
      name:
        type: string
        description: |
          The name you assign to the tag during creation. The name must be unique within the tag namespace and cannot be changed.
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The description you assign to the tag during creation.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#=======================================================================================================================
# Definitions of UpdateDetails
#=======================================================================================================================
  UpdateUserDetails:
    properties:
      description:
        type: string
        description: The description you assign to the user. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
 #-----------------------------------------------------------------------------------------------------------------------
  UpdateGroupDetails:
    properties:
      description:
        type: string
        description: The description you assign to the group. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  UpdateDynamicGroupDetails:
    description: Properties for updating a dynamic group.
    x-obmcs-feature-id:
      - udx-123
    properties:
      description:
        type: string
        description: The description you assign to the dynamic group. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      matchingRule:
        type: string
        description: |
         The matching rule to dynamically match an instance certificate to this dynamic group.
         For rule syntax, see [Managing Dynamic Groups](/Content/Identity/Tasks/managingdynamicgroups.htm).
        minLength: 1
#-----------------------------------------------------------------------------------------------------------------------
  UpdateSwiftPasswordDetails:
    properties:
      description:
        type: string
        description: The description you assign to the Swift password. Does not have to be unique, and it's changeable.
#-----------------------------------------------------------------------------------------------------------------------
  UpdateCustomerSecretKeyDetails:
    properties:
      displayName:
        type: string
        description: The description you assign to the secret key. Does not have to be unique, and it's changeable.
#-----------------------------------------------------------------------------------------------------------------------
  UpdateCompartmentDetails:
    properties:
      description:
        type: string
        description: The description you assign to the compartment. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      name:
        type: string
        description: |
          The new name you assign to the compartment. The name must be unique across all compartments in the tenancy.
        minLength: 1
        maxLength: 100
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  UpdatePolicyDetails:
    properties:
      description:
        type: string
        description: The description you assign to the policy. Does not have to be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      statements:
        type: array
        items:
          type: string
        description: |
          An array of policy statements written in the policy language. See
          [How Policies Work](/Content/Identity/Concepts/policies.htm) and
          [Common Policies](/Content/Identity/Concepts/commonpolicies.htm).
      versionDate:
        type: string
        format: date-time
        description: |
          The version of the policy. If null or set to an empty string, when a request comes in for authorization, the
          policy will be evaluated according to the current behavior of the services at that moment. If set to a particular
          date (YYYY-MM-DD), the policy will be evaluated according to the behavior of the services on that date.
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  UpdateStateDetails:
    properties:
      blocked:
        type: boolean
        description: |
          Update state to blocked or unblocked. Only "false" is supported (for changing the state to unblocked).
#-----------------------------------------------------------------------------------------------------------------------
  UpdateSaml2IdentityProviderDetails:
    allOf:
    - $ref: '#/definitions/UpdateIdentityProviderDetails'
    - discriminator: SAML2
      properties:
        metadataUrl:
          type: string
          description: |
            The URL for retrieving the identity provider's metadata,
            which contains information required for federating.
          minLength: 1
          maxLength: 512
        metadata:
          type: string
          description: |
            The XML that contains the information required for federating.
          minLength: 1
          maxLength: 100000
  UpdateIdentityProviderDetails:
    discriminator: protocol
    properties:
      protocol:
        description: |
          The protocol used for federation.

          Example: `SAML2`
        type: string
        enum:
        - SAML2
      description:
        type: string
        description: |
          The description you assign to the `IdentityProvider`. Does not have to
          be unique, and it's changeable.
        minLength: 1
        maxLength: 400
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
    required:
      - protocol
#-----------------------------------------------------------------------------------------------------------------------
  UpdateIdpGroupMappingDetails:
    properties:
      idpGroupName:
        type: string
        description: The idp group name.
      groupId:
        type: string
        description: The OCID of the group.
#-----------------------------------------------------------------------------------------------------------------------
  UpdateTagNamespaceDetails:
    properties:
      description:
        type: string
        description: The description you assign to the tag namespace.
        minLength: 1
        maxLength: 400
      isRetired:
        type: boolean
        description: |
          Whether the tag namespace is retired.
          See [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring).
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#-----------------------------------------------------------------------------------------------------------------------
  UpdateTagDetails:
    properties:
      description:
        type: string
        description: The description you assign to the tag during creation.
        minLength: 1
        maxLength: 400
      isRetired:
        type: boolean
        description: |
          Whether the tag is retired.
          See [Retiring Key Definitions and Namespace Definitions](/Content/Identity/Concepts/taggingoverview.htm#Retiring).
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#=======================================================================================================================
# Definitions of Add Details
#=======================================================================================================================
  AddUserToGroupDetails:
    required:
      - userId
      - groupId
    properties:
      userId:
        type: string
        description: The OCID of the user.
      groupId:
        type: string
        description: The OCID of the group.
#=======================================================================================================================
# Definitions of secondary entities
#=======================================================================================================================
  ApiKey:
    description: |
      A PEM-format RSA credential for securing requests to the Oracle Cloud Infrastructure REST API. Also known
      as an *API signing key*. Specifically, this is the public key from the key pair. The private key remains with
      the user calling the API. For information about generating a key pair
      in the required PEM format, see [Required Keys and OCIDs](/Content/API/Concepts/apisigningkey.htm).

      **Important:** This is **not** the SSH key for accessing compute instances.

      Each user can have a maximum of three API signing keys.

      For more information about user credentials, see [User Credentials](/Content/Identity/Concepts/usercredentials.htm).
    properties:
      keyId:
        type: string
        description: |
          An Oracle-assigned identifier for the key, in this format:
          TENANCY_OCID/USER_OCID/KEY_FINGERPRINT.
      keyValue:
        type: string
        description: The key's value.
      fingerprint:
        type: string
        description: The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
      userId:
        type: string
        description: The OCID of the user the key belongs to.
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the `ApiKey` object was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The API key's current state. After creating an `ApiKey` object, make sure its `lifecycleState` changes from
          CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
#-----------------------------------------------------------------------------------------------------------------------
  UIPassword:
    description: |
      A text password that enables a user to sign in to the Console, the user interface for interacting with Oracle
      Cloud Infrastructure.

      For more information about user credentials, see [User Credentials](/Content/Identity/Concepts/usercredentials.htm).
    properties:
      password:
        type: string
        description: The user's password for the Console.
      userId:
        type: string
        description: The OCID of the user.
      timeCreated:
        type: string
        format:   date-time
        description: |
          Date and time the password was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The password's current state. After creating a password, make sure its `lifecycleState` changes from
          CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
#-----------------------------------------------------------------------------------------------------------------------
  SwiftPassword:
    description: |
      Swift is the OpenStack object storage service. A `SwiftPassword` is an Oracle-provided password for using a
      Swift client with the Oracle Cloud Infrastructure Object Storage Service. This password is associated with
      the user's Console login. Swift passwords never expire. A user can have up to two Swift passwords at a time.

      **Note:** The password is always an Oracle-generated string; you can't change it to a string of your choice.

      For more information, see [Managing User Credentials](/Content/Identity/Tasks/managingcredentials.htm).
    properties:
      password:
        type: string
        description: |
          The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not
          for `ListSwiftPasswords` or `UpdateSwiftPassword`.
      id:
        type: string
        description: The OCID of the Swift password.
      userId:
        type: string
        description: The OCID of the user the password belongs to.
      description:
        type: string
        description: The description you assign to the Swift password. Does not have to be unique, and it's changeable.
      timeCreated:
        type: string
        format: date-time
        description: |
          Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      expiresOn:
        type: string
        format: date-time
        description: |
          Date and time when this password will expire, in the format defined by RFC3339.
          Null if it never expires.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The password's current state. After creating a password, make sure its `lifecycleState` changes from
          CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
#-----------------------------------------------------------------------------------------------------------------------
  CustomerSecretKey:
    description: |
      A `CustomerSecretKey` is an Oracle-provided key for using the Object Storage Service's
      [Amazon S3 compatible API](/Content/Object/Tasks/s3compatibleapi.htm).
      A user can have up to two secret keys at a time.

      **Note:** The secret key is always an Oracle-generated string; you can't change it to a string of your choice.

      For more information, see [Managing User Credentials](/Content/Identity/Tasks/managingcredentials.htm).
    properties:
      key:
        type: string
        description: |
          The secret key.
      id:
        type: string
        description: The OCID of the secret key.
      userId:
        type: string
        description: The OCID of the user the password belongs to.
      displayName:
        type: string
        description: The display name you assign to the secret key. Does not have to be unique, and it's changeable.
      timeCreated:
        type: string
        format: date-time
        description: |
          Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      timeExpires:
        type: string
        format: date-time
        description: |
          Date and time when this password will expire, in the format defined by RFC3339.
          Null if it never expires.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The secret key's current state. After creating a secret key, make sure its `lifecycleState` changes from
          CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
#-----------------------------------------------------------------------------------------------------------------------
  CustomerSecretKeySummary:
    description: |
      As the name suggests, a `CustomerSecretKeySummary` object contains information about a `CustomerSecretKey`.
      A `CustomerSecretKey` is an Oracle-provided key for using the Object Storage Service's Amazon S3 compatible API.
    properties:
      id:
        type: string
        description: The OCID of the secret key.
      userId:
        type: string
        description: The OCID of the user the password belongs to.
      displayName:
        type: string
        description: The displayName you assign to the secret key. Does not have to be unique, and it's changeable.
      timeCreated:
        type: string
        format: date-time
        description: |
          Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.

          Example: `2016-08-25T21:10:29.600Z`
      timeExpires:
        type: string
        format: date-time
        description: |
          Date and time when this password will expire, in the format defined by RFC3339.
          Null if it never expires.

          Example: `2016-08-25T21:10:29.600Z`
      lifecycleState:
        type: string
        enum:
        - CREATING
        - ACTIVE
        - INACTIVE
        - DELETING
        - DELETED
        description: |
          The secret key's current state. After creating a secret key, make sure its `lifecycleState` changes from
          CREATING to ACTIVE before using it.
        minLength: 1
        maxLength: 64
      inactiveStatus:
        type: integer
        format: int64
        description: The detailed status of INACTIVE lifecycleState.
#-----------------------------------------------------------------------------------------------------------------------
  AvailabilityDomain:
    description:  |
      One or more isolated, fault-tolerant Oracle data centers that host cloud resources such as instances, volumes,
      and subnets. A region contains several Availability Domains. For more information, see
      [Regions and Availability Domains](/Content/General/Concepts/regions.htm).
    properties:
      name:
        type: string
        description: The name of the Availability Domain.
      compartmentId:
        type: string
        description: The OCID of the tenancy.
#-----------------------------------------------------------------------------------------------------------------------
  FaultDomain:
    description:  |
      A Fault Domain is a logical grouping of hardware and infrastructure within an Availability Domain that can become
      unavailable in its entirety either due to hardware failure such as Top-of-rack (TOR) switch failure or due to
      planned software maintenance such as security updates that reboot your instances.
    properties:
      name:
        type: string
        description: The name of the Fault Domain.
      compartmentId:
        type: string
        description: The OCID of the of the compartment. Currently only tenancy (root) compartment can be provided.
      availabilityDomain:
        type: string
        description: The name of the availabilityDomain where the Fault Domain belongs.
    x-obmcs-internal-only: true
#=======================================================================================================================
# Definitions of Tenancy
#=======================================================================================================================
  Tenancy:
    description: |
      The root compartment that contains all of your organization's compartments and other
      Oracle Cloud Infrastructure cloud resources. When you sign up for Oracle Cloud Infrastructure,
      Oracle creates a tenancy for your company, which is a secure and isolated partition
      where you can create, organize, and administer your cloud resources.

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator. If you're an administrator who needs to write policies to give users access,
      see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).

    properties:
      id:
        type: string
        description: The OCID of the tenancy.
      name:
        type: string
        description: The name of the tenancy.
      description:
        type: string
        description: The description of the tenancy.
      homeRegionKey:
        type: string
        description: |
          The region key for the tenancy's home region.

          Allowed values are:
          - `IAD`
          - `PHX`
          - `FRA`
      freeformTags:
        description: |
          Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Department": "Finance"}`
        type: object
        additionalProperties:
          type: string
      definedTags:
        type: object
        description: |
          Defined tags for this resource. Each key is predefined and scoped to a namespace.
          For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
          Example: `{"Operations": {"CostCenter": "42"}}`
        additionalProperties:
          type: object
          description: |
            Key-value pair representing a defined tag key and value, scoped to a namespace.
            Example: `{"CostCenter": "42"}`
          additionalProperties:
            type: object
            description: |
              The value of the tag. Only the String type is supported.
#=======================================================================================================================
# Definitions of Region Subscription
#=======================================================================================================================
  CreateRegionSubscriptionDetails:
    required:
      - regionKey
    properties:
      regionKey:
        type: string
        description: |
          The regions's key.

          Allowed values are:
          - `PHX`
          - `IAD`
          - `FRA`

          Example: `PHX`
        minLength: 1
        maxLength: 16

  RegionSubscription:
    description: |
      An object that represents your tenancy's access to a particular region (i.e., a subscription), the status of that
      access, and whether that region is the home region. For more information, see [Managing Regions](/Content/Identity/Tasks/managingregions.htm).

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator. If you're an administrator who needs to write policies to give users access,
      see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).

    required:
        - regionKey
        - regionName
        - status
        - isHomeRegion
    properties:
      regionKey:
        type: string
        description: |
          The region's key.

          Allowed values are:
          - `PHX`
          - `IAD`
          - `FRA`

        minLength: 1
        maxLength: 16
      regionName:
        type: string
        description: |
          The region's name.

          Allowed values are:
          - `us-phoenix-1`
          - `us-ashburn-1`
          - `eu-frankurt-1`

        minLength: 1
        maxLength: 16
      status:
        type: string
        description: The region subscription status.
        enum:
          - READY
          - IN_PROGRESS
      isHomeRegion:
        type: boolean
        description: Indicates if the region is the home region or not.
#=======================================================================================================================
# Definitions of Region
#=======================================================================================================================
  Region:
    description: |
      A localized geographic area, such as Phoenix, AZ. Oracle Cloud Infrastructure is hosted in regions and Availability
      Domains. A region is composed of several Availability Domains. An Availability Domain is one or more data centers
      located within a region. For more information, see [Regions and Availability Domains](/Content/General/Concepts/regions.htm).

      To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
      talk to an administrator. If you're an administrator who needs to write policies to give users access,
      see [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
    properties:
      key:
        description: |
          The key of the region.

          Allowed values are:
          - `PHX`
          - `IAD`
          - `FRA`
        type: string
        minLength: 1
        maxLength: 16
      name:
        description: |
          The name of the region.

          Allowed values are:
          - `us-phoenix-1`
          - `us-ashburn-1`
          - `eu-frankfurt-1`
        type: string
        minLength: 1
        maxLength: 16
#=======================================================================================================================
# Definitions of Parameters
#=======================================================================================================================
parameters:
  PaginationLimitQueryParam:
    name: limit
    in: query
    type: integer
    description: |
      The maximum number of items to return in a paginated "List" call.
    minimum: 1
    maximum: 1000
#-----------------------------------------------------------------------------------------------------------------------
  PaginationTokenQueryParam:
    name: page
    in: query
    type: string
    description: |
      The value of the `opc-next-page` response header from the previous "List" call.
    minLength: 1
    maxLength: 512
#-----------------------------------------------------------------------------------------------------------------------
  IfMatchHeader:
    name: if-match
    in: header
    type: string
    description: |
      For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match`
      parameter to the value of the etag from a previous GET or POST response for that resource.  The resource
      will be updated or deleted only if the etag you provide matches the resource's current etag value.
 #-----------------------------------------------------------------------------------------------------------------------
  RetryTokenHeader:
    name: opc-retry-token
    in: header
    type: string
    description: |
      A token that uniquely identifies a request so it can be retried in case of a timeout or
      server error without risk of executing that same action again. Retry tokens expire after 24
      hours, but can be invalidated before then due to conflicting operations (e.g., if a resource
      has been deleted and purged from the system, then a retry of the original creation request
      may be rejected).
    minLength: 1
    maxLength: 64
#-----------------------------------------------------------------------------------------------------------------------
  CompartmentIdQueryParam:
    name: compartmentId
    in: query
    required: true
    type: string
    description: |
      The OCID of the compartment (remember that the tenancy is simply the root compartment).
    minLength: 1
    maxLength: 100
#-----------------------------------------------------------------------------------------------------------------------
  IdentityProviderProtocolQueryParam:
    name: protocol
    in: query
    required: true
    description: The protocol used for federation.
    type: string
    enum:
    - SAML2
    x-obmcs-inline-enum: false
#-----------------------------------------------------------------------------------------------------------------------
  UserGroupMembershipIdPathParam:
    name: userGroupMembershipId
    in: path
    required : true
    type: string
    description: The OCID of the userGroupMembership.
#-----------------------------------------------------------------------------------------------------------------------
  UserIdPathParam:
    name: userId
    in: path
    required : true
    type: string
    description: The OCID of the user.
#-----------------------------------------------------------------------------------------------------------------------
  GroupIdPathParam:
    name: groupId
    in: path
    required : true
    type: string
    description: The OCID of the group.
#-----------------------------------------------------------------------------------------------------------------------
  DynamicGroupIdPathParam:
    name: dynamicGroupId
    in: path
    x-obmcs-feature-id:
      - udx-123
    required : true
    type: string
    description: The OCID of the dynamic group.
#-----------------------------------------------------------------------------------------------------------------------
  UserIdQueryParam:
    name: userId
    in: query
    type: string
    description: The OCID of the user.
#-----------------------------------------------------------------------------------------------------------------------
  GroupIdQueryParam:
    name: groupId
    in: query
    type: string
    description: The OCID of the group.
#-----------------------------------------------------------------------------------------------------------------------
  CompartmentIdPathParam:
    name: compartmentId
    in: path
    required : true
    type: string
    description: The OCID of the compartment.
#-----------------------------------------------------------------------------------------------------------------------
  PolicyIdPathParam:
    name: policyId
    in: path
    required : true
    type: string
    description: The OCID of the policy.
#-----------------------------------------------------------------------------------------------------------------------
  KeyFingerprintPathParam:
    name: fingerprint
    in: path
    required: true
    type: string
    description: The key's fingerprint.
#-----------------------------------------------------------------------------------------------------------------------
  SwiftPasswordIdPathParam:
    name: swiftPasswordId
    in: path
    required: true
    type: string
    description: The OCID of the Swift password.
#-----------------------------------------------------------------------------------------------------------------------
  IdentityProviderIdPathParam:
    name: identityProviderId
    in: path
    required: true
    type: string
    description: The OCID of the identity provider.
#-----------------------------------------------------------------------------------------------------------------------
  IdpGroupMappingIdPathParam:
    name: mappingId
    in: path
    required: true
    type: string
    description: The OCID of the group mapping.
#-----------------------------------------------------------------------------------------------------------------------
  TenancyIdPathParam:
    name: tenancyId
    in: path
    required : true
    type: string
    description: The OCID of the tenancy.
#-----------------------------------------------------------------------------------------------------------------------
  CustomerSecretKeyIdPathParam:
    name: customerSecretKeyId
    in: path
    required: true
    type: string
    description: The OCID of the secret key.
#-----------------------------------------------------------------------------------------------------------------------
  AvailabilityDomainQueryParam:
    name: availabilityDomain
    in: query
    required: true
    type: string
    description: |
      The name of the availibilityDomain.
    x-obmcs-internal-only: true
#-----------------------------------------------------------------------------------------------------------------------
  tagNamespaceIdPathParam:
    name: tagNamespaceId
    in: path
    required: true
    type: string
    description: |
      The OCID of the tag namespace.
    minLength: 1
    maxLength: 100
#-----------------------------------------------------------------------------------------------------------------------
  tagNamePathParam:
    name: tagName
    in: path
    required: true
    type: string
    description: |
      The name of the tag.
    minLength: 1
    maxLength: 100
#-----------------------------------------------------------------------------------------------------------------------
responses:
  DefaultError:
    description: |
      An error has occurred.
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'
  400:
    description: Bad Request
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'
  401:
    description: Unauthorized
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'
  403:
    description: Forbidden
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'
  404:
    description: Not Found
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'
  409:
    description: Conflict
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'
  412:
    description: Precondition Failed
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'
  500:
    description: Internal Server Error
    headers:
      opc-request-id:
        type: string
        description: |
          Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
          particular request, please provide the request ID.
    schema:
      $ref: '#/definitions/Error'

# spec-conditionals-preprocessor-plugin: Enabled conditional groups:
# spec-conditionals-preprocessor-plugin:
# spec-conditionals-preprocessor-plugin: Filtered out conditional groups:
